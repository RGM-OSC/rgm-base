#!/bin/bash
#
# Copyright (C) 2019 RGM Team
# 2019-04-19 - v. 1.0 - Eric Belhomme <ebelhomme@fr.scc.com>
#
# LICENCE :
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
#########################################

function print_help() {

    echo -e " \e[1m-+- \e[34mRGM\e[39m updater tool -+-\e[0m\n"
    echo -e "Usage:\n\n  \e[1mrgmupdate -h -p -r -u -a -g <role:commit> -o <opts>\e[0m\n"
    echo -e "  -h               : this help message"
    echo -e "  -p               : update Ansible playbook from remote Git repo prior to run the update playbook"
    echo -e "  -r               : update Ansible roles from using Ansible Galaxy prior to run the update playbook"
	echo -e "  -g <role:commit> : extract specified Ansible role directly from its Git repo instead of using Galaxy"
	echo -e "                     format : 'role-name:commit' (can be commit SHA, tag, etc.)"
	echo -e "                     examples: 'rgmupdate -g ansible-role-rgm:ef9ed110'"
    echo -e "  -u               : run the Ansible update playbook only"
    echo -e "  -a               : synonym of -p -r -u"
    echo -e "  -o <opts>        : pass extra parameters to ansible-playbook command line"
    echo -e "\n(c) 2019 RGM team - http://www.rgm-cloud.io"
}

function print_reqs() {
	python <<EOF
import yaml
v = yaml.load(open('${ANSIBLE_ROOT}/roles/requirements.yml'))
for item in v:
	print("{}?{}".format(item['name'], item['src']))
EOF
}

function get_git_role() {
	GALAXYREQ="${ANSIBLE_ROOT}/roles/requirements.yml"
	ROLENAME="$(echo $1 | cut -d ':' -f 1)"
	ROLEVERS="$(echo $1 | cut -s -d ':' -f 2)"
	echo "ROLENAME: $ROLENAME - ROLEVERS: $ROLEVERS"
	if [ -z $ROLEVERS ]; then
		ROLEVERS='master'
	fi
	
	for item in $(print_reqs); do
		REQRNAME="$(echo $item | cut -d '?' -f 1)"
		if [ "$ROLENAME" == "$REQRNAME" ]; then
			URL="$(echo $item | sed 's/.*\(http.*\)$/\1/')"
			if [ -e "${ANSIBLE_ROOT}/roles/${ROLENAME}" ]; then
				rm -Rf "${ANSIBLE_ROOT}/roles/${ROLENAME}"
			fi
			SPWD=$(pwd -P)
			cd "${ANSIBLE_ROOT}/roles"
			git clone $URL $ROLENAME
			if [ "$ROLEVERS" != "master" ]; then
				cd "${ANSIBLE_ROOT}/roles/$ROLENAME"
				git checkout $ROLEVERS
			fi
			cd $SPWD
			return
		fi
	done
	echo "Error: Ansible role $ROLENAME is unknown !"
	exit 1
}

ANSIBLEPB=0
ANSIBLEGL=0
ANSIBLERN=0
GITROLES=()
ANSIBLE_PLB_ARGS=
ANSIBLE_RGM_INSTALLER_REPO="http://gitlab.budcca-demo.lab/rgm-ansible/ansible-rgm.git"
ANSIBLE_ROOT="/root/ansible-rgm"
CURDIR=$(pwd)

while getopts hpruag:o: arg; do
	case "$arg" in
		h) print_help ;;
		p) ANSIBLEPB=1 ;;
		r) ANSIBLEGL=1 ;;
		u) ANSIBLERN=1 ;;
		g) GITROLES+=($OPTARG) ;;
		o) ANSIBLE_PLB_ARGS="$OPTARG" ;;
		a)
		    ANSIBLEPB=1
		    ANSIBLEGL=1
		    ANSIBLERN=1
            ;;
		*) print_help;;
	esac
done


if [[ $ANSIBLEPB -eq 0 && $ANSIBLEGL -eq 0 && $ANSIBLERN -eq 0 && ${#GITROLES[@]} -eq 0 ]]; then
    print_help
fi

if [ ! -e $ANSIBLE_ROOT ]; then
    echo -e "\e[31mAnsible root not found, force -p -r\e[0m\n"
    ANSIBLEPB=1
    ANSIBLEGL=1
    cd $(dirname $ANSIBLE_ROOT)
    git clone $ANSIBLE_RGM_INSTALLER_REPO
fi

if [ $ANSIBLEPB -eq 1 ]; then
    cd $ANSIBLE_ROOT
    if [ -e /root/rgm-installer_auto-partition.yml ]; then
        git checkout group_vars/rgm.yml
        git pull
        cat /root/rgm-installer_auto-partition.yml >> group_vars/rgm.yml
    else
        cp group_vars/rgm.yml /tmp/
        git checkout group_vars/rgm.yml
        git pull
        rm -d group_vars/rgm.yml
        mv /tmp/rgm.yml group_vars/rgm.yml
    fi
fi

if [ $ANSIBLEGL -eq 1 ]; then
    cd $ANSIBLE_ROOT
    ansible-galaxy install -f -p ${ANSIBLE_ROOT}/roles -r ${ANSIBLE_ROOT}/roles/requirements.yml
fi

for item in "${GITROLES[@]}"; do
	get_git_role "$item"
done

if [ $ANSIBLERN -eq 1 ]; then
    cd $ANSIBLE_ROOT
    ansible-playbook "${ANSIBLE_PLB_ARGS}" rgm-installer.yml
fi